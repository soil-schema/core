import Generator, { Context, File, Template } from '../Generator.js';
import { SWIFT_LANG_CODE } from './const.js';

export const entityTemplate = (context: Context): File => {
  const content = context
    .content('file-header')
    .content('open')
    .contentEach({ directive: 'field' }, 'property')
    .content('init')
    .content('close')
    .body;
  return new File(`${context.get('name')}.swift`, content);
}

export const entityFileHeader = (context: Context): string => {
  if (context.hasAttribute('strip-comment')) return '';
  return `
///
/// ${context.get('name')}.swift
///
/// Auto Generated by soil-schema
///
`;
}

export const entityOpen = (context: Context): string => {
  return `
/// ${context.get('name')}
struct ${context.get('name')}: Codable {
`;
}

export const entityInit = (context: Context): string => {
  return context
    .dup()
    .string(`init(${context.renderEach({ directive: 'field', separator: ', ' }, 'signature')}) {`)
    .contentEach({ directive: 'field' }, 'assign-property')
    .string('}')
    .body;
}

export const pretty = (content: string, context: Context) => {
  const lines = content.replace(/\n\n\n/g, '\n\n').split('\n')
  const indent = '    ';
  var result = []
  var indentLevel = 0
  var commentBuffer = []
  for (var line of lines) {
    if (line.startsWith('///')) {
      commentBuffer.push(`${indent.repeat(indentLevel)}${line}`)
      continue
    }
    const hasBlockSignature = /^(?:@[A-Z][a-zA-Z]+ +)?(?:(public|open|internal|private|fileprivate|final)(?:\(set\))?\s+)*(var|let|struct|class|init|deinit|func|protocol|typealias|enum)\b/.test(line)
    if (hasBlockSignature) {
      if (result.length > 0) {
        result.push('')
      }
      result.push(...commentBuffer)
    }
    if (line.startsWith('.')) {
      indentLevel += 1
    }
    if (line == '}') {
      indentLevel -= 1
    }
    if (indentLevel < 0) {
      console.log(`Invalid indent level`, result)
    }
    result.push(`${indent.repeat(indentLevel)}${line}`)
    if (line.endsWith('{')) {
      indentLevel += 1
    }
    if (line.startsWith('.')) {
      indentLevel -= 1
    }
    commentBuffer = []
  }
  return result.join('\n')
}

export default (generator: Generator) => {
  generator
    .template(new Template(SWIFT_LANG_CODE, 'entity', entityTemplate))
    .renderer(SWIFT_LANG_CODE, 'entity', 'file-header', entityFileHeader)
    .renderer(SWIFT_LANG_CODE, 'entity', 'open', entityOpen)
    .renderer(SWIFT_LANG_CODE, 'entity', 'init', entityInit)
    .renderer(SWIFT_LANG_CODE, 'entity', 'close', () => '}')

    .hookContent('swift:entity:template', pretty);
}